"use client";
import { useState, useEffect, useCallback } from 'react';
import { useSession } from 'next-auth/react';
import dynamicImport from 'next/dynamic';
import { Conversation, getUserConversations, createConversation } from '../../lib/chat';

// Force dynamic rendering for this page
export const dynamic = 'force-dynamic';
export const runtime = 'nodejs';

const ChatWidget = dynamicImport(() => import('./ChatWidget'), { ssr: false });

interface ExtendedUser {
  id: string;
  name?: string | null;
  email?: string | null;
  image?: string | null;
}

interface ExtendedSession {
  user: ExtendedUser;
}

export default function ChatPage() {
  const { data: session, status } = useSession();
  
  // Prevent SSR issues by checking if session is loading
  if (status === 'loading') {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  if (!session) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">Please sign in to access chat</h2>
          <p className="text-gray-600">You need to be logged in to use the chat feature.</p>
        </div>
      </div>
    );
  }

  return <ChatContent session={session as unknown as ExtendedSession} />;
}

function ChatContent({ session }: { session: ExtendedSession }) {
  const [conversations, setConversations] = useState<Conversation[]>([]);
  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [showNewChatForm, setShowNewChatForm] = useState(false);
  const [newChatEmail, setNewChatEmail] = useState('');

  const loadConversations = useCallback(async () => {
    if (!session?.user?.id) return;

    try {
      setIsLoading(true);
      // For demo purposes, we'll assume user is a client
      // In a real app, you'd determine this from user role
      const userConversations = await getUserConversations(session.user.id, 'client');
      setConversations(userConversations);
      
      // Auto-select first conversation if available
      if (userConversations.length > 0 && !selectedConversation) {
        setSelectedConversation(userConversations[0]);
      }
    } catch (error) {
      console.error('Failed to load conversations:', error);
    } finally {
      setIsLoading(false);
    }
  }, [session?.user?.id, selectedConversation]);

  useEffect(() => {
    if (!session?.user?.id) return;
    loadConversations();
  }, [session?.user?.id, loadConversations]);

  const handleCreateConversation = async () => {
    if (!newChatEmail.trim() || !session?.user?.id) return;

    try {
      // In a real app, you'd lookup the provider by email
      // For demo, we'll use a mock provider ID
      const mockProviderId = 'provider-123';
      
      const newConversation = await createConversation(
        session.user.id,
        mockProviderId
      );
      
      setConversations(prev => [newConversation, ...prev]);
      setSelectedConversation(newConversation);
      setShowNewChatForm(false);
      setNewChatEmail('');
    } catch (error) {
      console.error('Failed to create conversation:', error);
    }
  };

  const formatLastMessageTime = (timestamp?: string) => {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    const now = new Date();
    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);
    
    if (diffInHours < 24) {
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    } else {
      return date.toLocaleDateString();
    }
  };

  return (
    <div style={{ display: 'flex', height: '100vh', background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' }}>
      {/* Sidebar */}
      <div style={{ width: '320px', background: 'rgba(255, 255, 255, 0.95)', borderRight: '1px solid #e5e7eb' }}>
        {/* Header */}
        <div style={{ padding: '1.5rem', borderBottom: '1px solid #e5e7eb' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
            <h2 style={{ margin: 0, fontSize: '1.25rem', fontWeight: '600' }}>Messages</h2>
            <button
              onClick={() => setShowNewChatForm(!showNewChatForm)}
              style={{
                padding: '0.5rem',
                background: '#3b82f6',
                color: 'white',
                border: 'none',
                borderRadius: '0.5rem',
                cursor: 'pointer'
              }}
            >
              + New
            </button>
          </div>
          
          {showNewChatForm && (
            <div style={{ marginTop: '1rem' }}>
              <input
                type="email"
                placeholder="Enter provider email..."
                value={newChatEmail}
                onChange={(e) => setNewChatEmail(e.target.value)}
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.375rem',
                  marginBottom: '0.5rem'
                }}
              />
              <div style={{ display: 'flex', gap: '0.5rem' }}>
                <button
                  onClick={handleCreateConversation}
                  disabled={!newChatEmail.trim()}
                  style={{
                    flex: 1,
                    padding: '0.5rem',
                    background: '#3b82f6',
                    color: 'white',
                    border: 'none',
                    borderRadius: '0.375rem',
                    cursor: 'pointer',
                    opacity: !newChatEmail.trim() ? 0.5 : 1
                  }}
                >
                  Start Chat
                </button>
                <button
                  onClick={() => setShowNewChatForm(false)}
                  style={{
                    flex: 1,
                    padding: '0.5rem',
                    background: '#6b7280',
                    color: 'white',
                    border: 'none',
                    borderRadius: '0.375rem',
                    cursor: 'pointer'
                  }}
                >
                  Cancel
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Conversations List */}
        <div style={{ flex: 1, overflowY: 'auto', maxHeight: 'calc(100vh - 180px)' }}>
          {isLoading ? (
            <div style={{ padding: '2rem', textAlign: 'center' }}>
              <div>Loading conversations...</div>
            </div>
          ) : conversations.length === 0 ? (
            <div style={{ padding: '2rem', textAlign: 'center', color: '#6b7280' }}>
              <div>No conversations yet</div>
              <div style={{ fontSize: '0.875rem', marginTop: '0.5rem' }}>
                Click &ldquo;New&rdquo; to start your first conversation
              </div>
            </div>
          ) : (
            conversations.map((conversation) => (
              <div
                key={conversation.id}
                onClick={() => setSelectedConversation(conversation)}
                style={{
                  padding: '1rem',
                  borderBottom: '1px solid #f3f4f6',
                  cursor: 'pointer',
                  background: selectedConversation?.id === conversation.id ? '#eff6ff' : 'transparent',
                  transition: 'background-color 0.2s'
                }}
                onMouseEnter={(e) => {
                  if (selectedConversation?.id !== conversation.id) {
                    e.currentTarget.style.background = '#f9fafb';
                  }
                }}
                onMouseLeave={(e) => {
                  if (selectedConversation?.id !== conversation.id) {
                    e.currentTarget.style.background = 'transparent';
                  }
                }}
              >
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                  <div style={{ flex: 1, minWidth: 0 }}>
                    <div style={{ fontWeight: '600', fontSize: '0.875rem', marginBottom: '0.25rem' }}>
                      Provider Chat
                    </div>
                    <div
                      style={{
                        fontSize: '0.75rem',
                        color: '#6b7280',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        whiteSpace: 'nowrap'
                      }}
                    >
                      {conversation.last_message || 'No messages yet'}
                    </div>
                  </div>
                  <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end', gap: '0.25rem' }}>
                    <div style={{ fontSize: '0.75rem', color: '#6b7280' }}>
                      {formatLastMessageTime(conversation.last_message_at)}
                    </div>
                    {conversation.unread_count > 0 && (
                      <div
                        style={{
                          background: '#ef4444',
                          color: 'white',
                          borderRadius: '50%',
                          width: '20px',
                          height: '20px',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: '0.75rem',
                          fontWeight: '600'
                        }}
                      >
                        {conversation.unread_count}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

      {/* Chat Area */}
      <div style={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
        {selectedConversation ? (
          <ChatWidget
            conversationId={selectedConversation.id}
            providerId={selectedConversation.provider_id}
            clientId={selectedConversation.client_id}
          />
        ) : (
          <div style={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
            <div style={{ textAlign: 'center', color: 'rgba(255, 255, 255, 0.8)' }}>
              <div style={{ fontSize: '1.5rem', marginBottom: '1rem' }}>💬</div>
              <div style={{ fontSize: '1.125rem', marginBottom: '0.5rem' }}>Select a conversation</div>
              <div style={{ fontSize: '0.875rem' }}>Choose a conversation from the sidebar to start messaging</div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
